From 78b22eaf5506bc5337941c997a092a667268b119 Mon Sep 17 00:00:00 2001
From: Leon Hartley <lhartley97@gmail.com>
Date: Sun, 9 Feb 2014 20:51:55 +0000
Subject: [PATCH] Sit heights & walking onto chair is perfect but some other
 heights may be broken *cough* rollers *cough*

---
 .../items/interactions/InteractionManager.java     |  3 ++-
 .../interactions/items/PressurePadInteraction.java |  3 +--
 .../game/rooms/avatars/pathfinding/Pathfinder.java |  9 ++++++--
 .../rooms/types/components/ProcessComponent.java   |  4 ++--
 .../game/rooms/types/mapping/RoomMapping.java      | 26 ++++++++++++++--------
 .../game/rooms/types/mapping/TileInstance.java     | 14 +++++++-----
 .../incoming/room/item/PlaceItemMessageEvent.java  |  4 ++--
 7 files changed, 39 insertions(+), 24 deletions(-)

diff --git a/src/main/java/com/cometsrv/game/items/interactions/InteractionManager.java b/src/main/java/com/cometsrv/game/items/interactions/InteractionManager.java
index 3d80ef1..fed770a 100644
--- a/src/main/java/com/cometsrv/game/items/interactions/InteractionManager.java
+++ b/src/main/java/com/cometsrv/game/items/interactions/InteractionManager.java
@@ -34,7 +34,6 @@ public class InteractionManager {
 
     public void loadInteractions() {
         // Furniture
-        if (this.DICE_ENABLED) { this.interactions.put("dice", new DiceInteraction()); }
         this.interactions.put("default", new DefaultInteraction());
         this.interactions.put("gate", new GateInteraction());
         this.interactions.put("pressure_pad", new PressurePadInteraction());
@@ -42,6 +41,8 @@ public class InteractionManager {
         this.interactions.put("habbowheel", new WheelInteractor());
         this.interactions.put("roller", new RollerInteraction());
 
+        if (InteractionManager.DICE_ENABLED) { this.interactions.put("dice", new DiceInteraction()); }
+
         // Wired Actions
         this.interactions.put("wf_act_move_rotate", new WiredActionMoveRotate());
         this.interactions.put("wf_act_saymsg", new WiredActionShowMessage());
diff --git a/src/main/java/com/cometsrv/game/items/interactions/items/PressurePadInteraction.java b/src/main/java/com/cometsrv/game/items/interactions/items/PressurePadInteraction.java
index ab4f34e..3f369d1 100644
--- a/src/main/java/com/cometsrv/game/items/interactions/items/PressurePadInteraction.java
+++ b/src/main/java/com/cometsrv/game/items/interactions/items/PressurePadInteraction.java
@@ -4,6 +4,7 @@ import com.cometsrv.game.items.interactions.Interactor;
 import com.cometsrv.game.rooms.entities.types.PlayerEntity;
 import com.cometsrv.game.rooms.items.RoomItem;
 import com.cometsrv.game.rooms.types.Room;
+import com.cometsrv.network.messages.outgoing.misc.AdvancedAlertMessageComposer;
 
 public class PressurePadInteraction extends Interactor {
 
@@ -11,14 +12,12 @@ public class PressurePadInteraction extends Interactor {
     public boolean onWalk(boolean state, RoomItem item, PlayerEntity avatar) {
         if(item.getExtraData().equals("0")) {
             item.setExtraData("1");
-
         } else if(item.getExtraData().equals("1")) {
             item.setExtraData("0");
         }
 
         item.sendUpdate();
         item.saveData();
-
         return false;
     }
 
diff --git a/src/main/java/com/cometsrv/game/rooms/avatars/pathfinding/Pathfinder.java b/src/main/java/com/cometsrv/game/rooms/avatars/pathfinding/Pathfinder.java
index b09ebac..72c1381 100644
--- a/src/main/java/com/cometsrv/game/rooms/avatars/pathfinding/Pathfinder.java
+++ b/src/main/java/com/cometsrv/game/rooms/avatars/pathfinding/Pathfinder.java
@@ -64,9 +64,14 @@ public class Pathfinder
                 int newX = movePoint.x + userX;
                 int newY = movePoint.y + userY;
 
-                boolean isLastStep = false;
+                /*boolean lastStep = false;
 
-                if (avatar.getRoom().getMapping().isValidStep(new Position3D(userX, userY, 0), new Position3D(newX, newY, 0), isLastStep))
+                if(newX == goalX && newY == goalY)
+                    lastStep = true;*/
+                Position3D currentPos = new Position3D(userX, userY, 0);
+                Position3D newPos = new Position3D(newX, newY, 0);
+
+                if (avatar.getRoom().getMapping().isValidStep(currentPos, newPos)) //, true))
                 {
                     Square pCoord = new Square(newX, newY);
                     pCoord.positionDistance = DistanceBetween(newX, newY, goalX, goalY);
diff --git a/src/main/java/com/cometsrv/game/rooms/types/components/ProcessComponent.java b/src/main/java/com/cometsrv/game/rooms/types/components/ProcessComponent.java
index e0b18b6..a40ed65 100644
--- a/src/main/java/com/cometsrv/game/rooms/types/components/ProcessComponent.java
+++ b/src/main/java/com/cometsrv/game/rooms/types/components/ProcessComponent.java
@@ -224,7 +224,7 @@ public class ProcessComponent implements CometTask {
 
             boolean isLastStep = (entity.getProcessingPath().size() == 0);
 
-            if (nextSq != null && entity.getRoom().getMapping().isValidStep(entity.getPosition(), new Position3D(nextSq.x, nextSq.y, 0), isLastStep)) {
+            if (nextSq != null && entity.getRoom().getMapping().isValidStep(entity.getPosition(), new Position3D(nextSq.x, nextSq.y, 0))) {//, isLastStep)) {
                 Position3D currentPos = entity.getPosition() != null ? entity.getPosition() : new Position3D(0, 0, 0);
                 entity.setBodyRotation(Position3D.calculateRotation(currentPos.getX(), currentPos.getY(), nextSq.x, nextSq.y, false));
                 entity.setHeadRotation(entity.getBodyRotation());
@@ -237,7 +237,7 @@ public class ProcessComponent implements CometTask {
                     if(item.getDefinition().getInteraction().equals("gate") && item.getExtraData().equals("0"))
                         isCancelled = true;
 
-                    height += item.getDefinition().getHeight();
+                    height += item.getHeight();
                 }
 
                 if(!isCancelled) {
diff --git a/src/main/java/com/cometsrv/game/rooms/types/mapping/RoomMapping.java b/src/main/java/com/cometsrv/game/rooms/types/mapping/RoomMapping.java
index 4ac5e33..7501890 100644
--- a/src/main/java/com/cometsrv/game/rooms/types/mapping/RoomMapping.java
+++ b/src/main/java/com/cometsrv/game/rooms/types/mapping/RoomMapping.java
@@ -27,14 +27,16 @@ public class RoomMapping {
         this.tiles = new TileInstance[sizeX][sizeY];
 
         for(int x = 0; x < sizeX; x++) {
+            TileInstance[] xArray = new TileInstance[sizeY];
+
             for(int y = 0; y < sizeY; y++) {
                 TileInstance instance = new TileInstance(this, new Position3D(x, y, 0d));
                 instance.reload();
 
-                this.tiles[x][y] = instance;
-
-                System.out.println("TileX: " + x + ", TileY: " + y);
+                xArray[y] = instance;
             }
+
+            this.tiles[x] = xArray;
         }
     }
 
@@ -50,22 +52,26 @@ public class RoomMapping {
         return (height0 - height1) <= 1.5;
     }
 
-    public boolean isValidStep(Position3D from, Position3D to, boolean lastStep) {
+    public boolean isValidStep(Position3D from, Position3D to) {//, boolean lastStep) {
         if(!isValidPosition(to) || (this.model.getSquareState()[to.getX()][to.getY()] == RoomTileState.INVALID) || positionHasUser(to)) {
             return false;
         }
 
         TileInstance tile = tiles[to.getX()][to.getY()];
 
-        if(tile.getMovementNode() == RoomEntityMovementNode.CLOSED
-                || tile.getMovementNode() == RoomEntityMovementNode.END_OF_ROUTE && !lastStep) {
+        if(tile == null) {
             return false;
         }
 
-        if(to.getX() == this.model.getDoorX() && to.getY() == this.model.getDoorY() && !lastStep) {
+        if(tile.getMovementNode() == RoomEntityMovementNode.CLOSED) {
+                //|| tile.getMovementNode() == RoomEntityMovementNode.END_OF_ROUTE && !lastStep) {
             return false;
         }
 
+        /*if(to.getX() == this.model.getDoorX() && to.getY() == this.model.getDoorY()) { //&& !lastStep) {
+            return false;
+        }*/
+
         if (!canStepUpwards(getStepHeight(to), getStepHeight(from))) {
             return false;
         }
@@ -91,7 +97,7 @@ public class RoomMapping {
     }
 
     public boolean isValidPosition(Position3D position) {
-        boolean isOutOfBounds = false;
+        /*boolean isOutOfBounds = false;
         boolean isTileNull = false;
 
         if(this.model.getSizeX() < position.getX() || this.model.getSizeY() < position.getY()) {
@@ -102,7 +108,9 @@ public class RoomMapping {
             isTileNull = true;
         }
 
-        return !isOutOfBounds || !isTileNull;
+        return !isOutOfBounds || !isTileNull;*/
+
+        return (position.getX() >= 0 && position.getY() >= 0 && position.getX() < this.model.getSizeX() && position.getY() < this.model.getSizeY());
     }
 
     public final Room getRoom() {
diff --git a/src/main/java/com/cometsrv/game/rooms/types/mapping/TileInstance.java b/src/main/java/com/cometsrv/game/rooms/types/mapping/TileInstance.java
index 1fe21af..2a2b06d 100644
--- a/src/main/java/com/cometsrv/game/rooms/types/mapping/TileInstance.java
+++ b/src/main/java/com/cometsrv/game/rooms/types/mapping/TileInstance.java
@@ -9,8 +9,8 @@ public class TileInstance {
 
     private double stackHeight = 0.0;
 
-    private RoomEntityMovementNode movementNode = RoomEntityMovementNode.OPEN;
-    private RoomTileStatusType status = RoomTileStatusType.NONE;
+    private RoomEntityMovementNode movementNode;
+    private RoomTileStatusType status;
 
     public TileInstance(RoomMapping mappingInstance, Position3D position) {
         this.mappingInstance = mappingInstance;
@@ -27,14 +27,14 @@ public class TileInstance {
         for(FloorItem item : mappingInstance.getRoom().getItems().getItemsOnSquare(this.position.getX(), this.position.getY())) {
             stackHeight += item.getHeight() + Math.round(item.getDefinition().getHeight());
 
-            if(!item.getDefinition().canWalk) {
+            /*if(!item.getDefinition().canWalk) {
                 this.movementNode = RoomEntityMovementNode.CLOSED;
-            }
+            }*/
 
             switch (item.getDefinition().getInteraction().toLowerCase()) {
                 case "bed":
                     status = RoomTileStatusType.LAY;
-                    movementNode = RoomEntityMovementNode.END_OF_ROUTE;
+                    //movementNode = RoomEntityMovementNode.END_OF_ROUTE;
                     break;
 
                 case "gate":
@@ -48,10 +48,12 @@ public class TileInstance {
 
             if(item.getDefinition().canSit) {
                 status = RoomTileStatusType.SIT;
-                movementNode = RoomEntityMovementNode.END_OF_ROUTE;
+                //movementNode = RoomEntityMovementNode.END_OF_ROUTE;
                 break;
             }
         }
+
+        System.out.println(this.movementNode.toString());
     }
 
     public RoomEntityMovementNode getMovementNode() {
diff --git a/src/main/java/com/cometsrv/network/messages/incoming/room/item/PlaceItemMessageEvent.java b/src/main/java/com/cometsrv/network/messages/incoming/room/item/PlaceItemMessageEvent.java
index 6b412cc..a366d17 100644
--- a/src/main/java/com/cometsrv/network/messages/incoming/room/item/PlaceItemMessageEvent.java
+++ b/src/main/java/com/cometsrv/network/messages/incoming/room/item/PlaceItemMessageEvent.java
@@ -50,7 +50,7 @@ public class PlaceItemMessageEvent implements IEvent {
 
                 client.getPlayer().getEntity().getRoom().getEntities().broadcastMessage(
                         SendWallItemMessageComposer.compose(
-                                r.getItems().addWallItem(id, item.getBaseId(), client.getPlayer().getId(), r.getId(), position, (item.getExtraData().isEmpty() || item.getExtraData() == " ") ? "0" : item.getExtraData()),
+                                r.getItems().addWallItem(id, item.getBaseId(), client.getPlayer().getId(), r.getId(), position, (item.getExtraData().isEmpty() || item.getExtraData().equals(" ")) ? "0" : item.getExtraData()),
                                 r
                         )
                 );
@@ -88,7 +88,7 @@ public class PlaceItemMessageEvent implements IEvent {
 
                 Room room = client.getPlayer().getEntity().getRoom();
 
-                FloorItem floorItem = room.getItems().addFloorItem(id, item.getBaseId(), room.getId(), client.getPlayer().getId(), x, y, rot, height, (item.getExtraData().isEmpty() || item.getExtraData() == " ") ? "0" : item.getExtraData());
+                FloorItem floorItem = room.getItems().addFloorItem(id, item.getBaseId(), room.getId(), client.getPlayer().getId(), x, y, rot, height, (item.getExtraData().isEmpty() || item.getExtraData().equals(" ")) ? "0" : item.getExtraData());
                 List<Position3D> tilesToUpdate = new FastList<>();
 
                 tilesToUpdate.add(new Position3D(floorItem.getX(), floorItem.getY(), 0d));
-- 
1.8.3.msysgit.0

